{"version":3,"file":"static/js/main.chunk.js","sources":["/Users/rislam/offshore/casey/scraping/client/src/App.js","/Users/rislam/offshore/casey/scraping/client/src/index.js","/Users/rislam/offshore/casey/scraping/client/src/login/Login.js","/Users/rislam/offshore/casey/scraping/client/src/redux/store.js","/Users/rislam/offshore/casey/scraping/client/src/scraping/ScrapeForm.js","/Users/rislam/offshore/casey/scraping/client/src/services/dataService.js","/Users/rislam/offshore/casey/scraping/client/src/services/socketIoService.js","/Users/rislam/offshore/casey/scraping/client/src/services/utilService.js","/Users/rislam/offshore/casey/scraping/ignored /Users/rislam/offshore/casey/scraping/node_modules/engine.io-client/lib/transports ws"],"sourcesContent":["import React from 'react';\nimport { SocketIoService } from './services/socketIoService';\nimport { ScrapeForm } from './scraping/ScrapeForm.js';\nimport { Login } from './login/Login.js';\nimport { Provider, connect } from 'react-redux';\nimport { store } from './redux/store';\n\nexport class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = this.state || {};\n    }\n\n    componentWillMount() {\n        fetch('/users/session/validateMe', {\n          method: 'GET'\n        })\n        .then(res => res.json())\n        .then((result) => {\n            SocketIoService.init('new-session');\n            this.setState({isLoggedIn: true});\n          },\n          (error) => {\n              console.log(error);\n          }\n        )\n    }\n  \n    render() {\n        let content;\n        if (this.state.isLoggedIn) {\n          content = <ScrapeForm></ScrapeForm>;\n        } else if (this.state.isLoggedIn === false) {\n          content = <Login></Login>;\n        } else {\n          content = <h1>Loading...</h1>;\n        }\n        return (<Provider store={store}>\n        {content}\n        </Provider>);\n    }\n}\n","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport { ScrapeForm } from './scraping/ScrapeForm.js';\nimport { App } from './App.js';\nimport { socket } from './services/socketIoService';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n","import React from 'react';\nimport { UtilService } from '../services/utilService.js';\nimport { SocketIoService } from '../services/socketIoService';\n\nexport class Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {email: 'jmay@primefinance.com', password: 'newyork952'};\n    }\n  \n    handleChange(event, prop) {\n        this.setState({[prop]: event.target.value});\n    }\n  \n    handleSubmit(event) {\n        event.preventDefault();\n\n        const data = {\n          email: this.state.email,\n          password: UtilService.encryptText(this.state.password)\n        };\n        fetch(\"/users/login\", {\n          method: 'POST',\n          headers: {'Content-Type':'application/json'},\n          body: JSON.stringify(data)\n        })\n        .then(res => res.json())\n        .then((result) => {\n            // console.log(result);\n            SocketIoService.init('new-session');//.subscribe((value) => {\n              // delete this.appData.sentNewSessionReq;\n              // const sessionUser = payload;\n              // this.appData.sessionUser = sessionUser;\n          //});\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n  \n    render() {\n        return (\n          <form onSubmit={(ev) => this.handleSubmit(ev)}>\n            <div class='row'>\n              <label>\n                Email:\n                <input type=\"text\" value={this.state.email}/>\n              </label>\n            </div>\n            <div class='row'>\n              <label>\n                Password:\n                <input type=\"text\" value={this.state.password}/>\n              </label>\n            </div>\n            <input type=\"submit\" value=\"Login\" />\n          </form>\n        );\n    }\n}\n","import { createStore, combineReducers } from 'redux';\n\n\nconst reducer = combineReducers({\n    activeThreadId: activeThreadIdReducer,\n    threads: threadsReducer,\n  });\n  \n  function activeThreadIdReducer(state = '1-fca2', action) {\n    if (action.type === 'OPEN_THREAD') {\n      return action.id;\n    } else {\n      return state;\n    }\n  }\n  \n  function findThreadIndex(threads, action) {\n    switch (action.type) {\n      case 'ADD_MESSAGE': {\n        return threads.findIndex(\n          (t) => t.id === action.threadId\n        );\n      }\n      case 'DELETE_MESSAGE': {\n        return threads.findIndex(\n          (t) => t.messages.find((m) => (\n            m.id === action.id\n          ))\n        );\n      }\n    }\n  }\n  \n  function threadsReducer(state = [], action) {\n    switch (action.type) {\n      case 'ADD_MESSAGE':\n      case 'DELETE_MESSAGE': {\n        const threadIndex = findThreadIndex(state, action);\n  \n        const oldThread = state[threadIndex];\n        const newThread = {\n          ...oldThread,\n          messages: [] //messagesReducer(oldThread.messages, action),\n        };\n  \n        return [\n          ...state.slice(0, threadIndex),\n          newThread,\n          ...state.slice(\n            threadIndex + 1, state.length\n          ),\n        ];\n      }\n      default: {\n        return state;\n      }\n    }\n  }\n  \n  const store = createStore(reducer);\n\n  export { store };","import React from 'react';\n// import './form.scss';\nimport { add } from '../services/dataService';\n\nexport class ScrapeForm extends React.Component {\n    constructor(props) {\n        super(props);\n        debugger\n        this.state = {findText: 'General Contractor', location: 'Hartford, CT'};\n    }\n  \n    handleChange(event, prop) {\n        this.setState({[prop]: event.target.value});\n    }\n  \n    handleSubmit(event) {\n        // console.log('submitted: ' + this.state.findText, this.state.location);\n        event.preventDefault();\n\n        fetch(\"/dataGenerator?findText=\" + this.state.findText + '&location=' + this.state.location, {\n          method: 'GET'\n        })\n        .then(res => res.json())\n        .then(\n          (result) => {\n            console.log(result);\n          },\n          // Note: it's important to handle errors here\n          // instead of a catch() block so that we don't swallow\n          // exceptions from actual bugs in components.\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    }\n  \n    render() {\n        return (\n          <form onSubmit={(ev) => this.handleSubmit(ev)}>\n            <div class='row'>\n              <label>\n                Find:\n                <input type=\"text\" value={this.state.findText} onChange={(ev) => this.handleChange(ev, 'findText')}/>\n              </label>\n            </div>\n            <div class='row'>\n              <label>\n                location:\n                <input type=\"text\" value={this.state.location} onChange={(ev) => this.handleChange(ev, 'location') }/>\n              </label>\n            </div>\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n        );\n    }\n}\n","\nexport function add(x, y) {\n    return x + y;\n}","import io from 'socket.io-client';\n\n\nexport class SocketIoService {\n    static init() {\n        debugger\n        const socket = io.connect('/', { autoConnect: true, reconnectionAttempts: Infinity, rejectUnauthorized: true});;\n\n        socket.on('scraping-update', data => {\n            console.log('scraping-update', data);\n        });\n        \n        socket.on('socket-pub-sub-connected', () => {\n            console.log('yes.....socket-pub-sub-connected')\n          // if (sessionType) {\n          //     if (sessionType === 'new-session') {\n          //         this.socket.emit('user:clean-duplicate-sessions');\n          //     }\n          //     this.conEmitter.emit(true);\n          //     observer.next(sessionType);\n          //     observer.complete();\n        \n          //     sessionType = null;\n          // }\n          // this.processUnprocessedEvents();\n        });\n    }\n}\n\n\n// export {socket};","\nimport { Endcrypt } from 'endcrypt';\nimport * as moment from 'moment';\nimport * as _ from 'lodash';\n\nexport class UtilService {\n    constructor() {\n\n    }\n\n    static encryptText (msg) {\n        const ciphertext = new Endcrypt().encryptWithKey(msg, 'sdf!3#d44kk45jk;45kjk3nmp[dsfp45k');\n        return ciphertext;\n    }\n\n    static decryptText (cipher) {\n        const text = new Endcrypt().decryptWithKey(cipher, 'sdf!3#d44kk45jk;45kjk3nmp[dsfp45k');\n        return text;\n    }\n\n    // private methods\n\n}\n\n// module.exports.UtilService = new UtilService();","/* (ignored) */"],"mappings":"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","sourceRoot":""}